# General
druid.service=historical
druid.host=<%= @name %>.node.<%= @cdomain %>
druid.port=<%= @port %>
druid.server.http.numThreads=<%=([ node["cpu"]["total"].to_i-1, 1 ].max * 5)%>
<% if !node["redborder"]["druid"].nil? and !node["redborder"]["druid"]["historical"].nil? and !node["redborder"]["druid"]["historical"]["tier"].nil? and node["redborder"]["druid"]["historical"]["tier"].class == String and node["redborder"]["druid"]["historical"]["tier"]!="default" %>
druid.server.tier=<%= node["redborder"]["druid"]["historical"]["tier"] %>
<% else %>
druid.server.tier=_default_tier
<% end %>


druid.server.maxSize=<%= @maxsize  %>
druid.segmentCache.locations=[{"path": "<%= @segment_cache_dir %>", "maxSize": <%= @maxsize %>}]

druid.historical.cache.useCache=true
druid.historical.cache.populateCache=true
druid.historical.cache.unCacheable=["select"]

# Logging
druid.monitoring.monitors=["io.druid.client.cache.CacheMonitor", "com.metamx.metrics.JvmMonitor", "com.metamx.metrics.SysMonitor", "io.druid.server.metrics.HistoricalMetricsMonitor"]

# Processing
druid.processing.numThreads=<%= @processing_threads %>
druid.processing.buffer.sizeBytes=<%= @processing_memory_buffer_b %>
druid.query.groupBy.maxIntermediateRows=<%= @groupby_max_intermediate_rows %>
druid.query.groupBy.maxResults=<%= @groupby_max_results %>
druid.query.topN.minTopNThreshold=100